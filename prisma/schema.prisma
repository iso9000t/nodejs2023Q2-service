// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your modified Prisma schema file.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model remains at the top for visibility
model User {
  id        String   @id @default(uuid())
  login     String  
  password  String
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Bringing Album up for a change in structure
model Album {
  id         String      @id @default(uuid())
  name       String
  year       Int
  artistId   String?     @unique

  artist     Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull)
  tracks     Track[]
  favorite   FavoriteAlbum?
}

// Moving Track model here to mix things up
model Track {
  id         String      @id @default(uuid())
  name       String
  artistId   String?     @unique
  albumId    String?     @unique
  duration   Int

  artist     Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull)
  album      Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  favorite   FavoriteTrack?
}

// Artist model goes here to keep it close to Album and Track, which are closely related
model Artist {
  id          String       @id @default(uuid())
  name        String
  grammy      Boolean

  albums      Album[]
  tracks      Track[]
  favorite    FavoriteArtist?
}

// Favorite models go last to emphasize their role as supplementary to the main models
model FavoriteAlbum {
  id      String @id @default(uuid())
  albumId String @unique
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model FavoriteArtist {
  id       String @id @default(uuid())
  artistId String @unique
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model FavoriteTrack {
  id      String @id @default(uuid())
  trackId String @unique
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
}
